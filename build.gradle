plugins {
    alias(libs.plugins.titan)
    id("maven-publish")
}

group("net.deltapvp.saturn")

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "net.deltapvp.titan"

    dependencies {
        compileOnly(libs.annotations)
    }

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    shadowJar {
        configurations = [project.configurations.compileClasspath]
        dependencies {
            exclude(dependency('org.jetbrains:annotations'))
        }
    }

    publishing {
        repositories {
            maven {
                name = "delta"
                def releasesRepoUrl = "https://reposilite.deltapvp.net/releases/"
                def snapshotsRepoUrl = "https://reposilite.deltapvp.net/releases/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials(PasswordCredentials)
                authentication {
                    basic(BasicAuthentication)
                }
            }
            mavenLocal()
        }
        publications {
            shadow(MavenPublication) { publication ->
                project.shadow.component(publication)
                pom {
                    withXml(xml -> {
                        Node repos = xml.asNode().appendNode("repositories")
                        project.repositories.findAll {
                            if (it instanceof MavenArtifactRepository && it.url.toString().startsWith("https")) {
                                Node repository = repos.appendNode("repository")
                                repository.appendNode("id", it.url.toString().replace("https://", "").replace(".", "-").replace("/", "-"))
                                repository.appendNode("url", it.url.toString())
                            }
                        }
                    })
                }
                versionMapping {
                    usage(Usage.JAVA_API) { fromResolutionOf(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME) }
                    usage(Usage.JAVA_RUNTIME) { fromResolutionResult() }
                }
            }
        }
    }
}